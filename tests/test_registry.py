"""
Tests for the tools registry module.
"""

import unittest
from unittest.mock import MagicMock, patch

from src.cli_code.mcp.tools.models import Tool, ToolParameter
from src.cli_code.mcp.tools.registry import ToolRegistry


class TestToolRegistry(unittest.TestCase):
    """Tests for the ToolRegistry class."""

    def setUp(self):
        """Set up a fresh registry and a mock tool for each test."""
        self.registry = ToolRegistry()

        # Create a more realistic mock Tool
        self.mock_handler = MagicMock(return_value="Mock handler result")
        self.param1 = ToolParameter(name="param1", type="string", description="First param", required=True)
        self.param2 = ToolParameter(name="param2", type="integer", description="Second param")

        self.tool = Tool(
            name="mock_tool",
            description="A mock tool for testing",
            parameters=[self.param1, self.param2],
            handler=self.mock_handler,
        )

    def test_init(self):
        """Test initializing a ToolRegistry."""
        # Check that the registry starts empty using list_tools()
        self.assertEqual(len(self.registry.list_tools()), 0)

    def test_register(self):
        """Test registering a tool to the registry."""
        # Register the tool
        self.registry.register(self.tool)

        # Verify tool is in the registry
        registered_tool = self.registry.get_tool("mock_tool")
        self.assertEqual(registered_tool, self.tool)
        self.assertEqual(len(self.registry.list_tools()), 1)

    def test_register_duplicate_tool(self):
        """Test registering a tool with a duplicate name."""
        # Register a tool
        self.registry.register(self.tool)

        # Try registering another tool with the same name
        duplicate_tool = Tool(name="mock_tool", description="Another mock", parameters=[], handler=MagicMock())
        with self.assertRaisesRegex(ValueError, "Tool with name 'mock_tool' is already registered"):
            self.registry.register(duplicate_tool)

        # Ensure only the first tool is present
        self.assertEqual(len(self.registry.list_tools()), 1)

    def test_get_tool(self):
        """Test getting a tool from the registry."""
        # Register the tool
        self.registry.register(self.tool)

        # Get the tool
        retrieved_tool = self.registry.get_tool("mock_tool")

        # Verify the correct tool was retrieved
        self.assertEqual(retrieved_tool, self.tool)

    def test_get_nonexistent_tool(self):
        """Test getting a nonexistent tool from the registry."""
        # Get a nonexistent tool - should raise ValueError
        with self.assertRaisesRegex(ValueError, "No tool with name 'nonexistent_tool' is registered"):
            self.registry.get_tool("nonexistent_tool")

    def test_get_schemas(self):
        """Test getting tool schemas from the registry."""
        # Register the tool
        self.registry.register(self.tool)

        # Get the tool schemas
        schemas = self.registry.get_schemas()

        # Verify the schemas structure
        self.assertIn("mock_tool", schemas)
        mock_tool_schema = schemas["mock_tool"]
        self.assertEqual(mock_tool_schema["name"], "mock_tool")
        self.assertEqual(mock_tool_schema["description"], "A mock tool for testing")
        self.assertIn("parameters", mock_tool_schema)
        # Check the parameters format based on Tool.schema property
        # The get_schemas method returns the direct Tool.schema output
        # under the "parameters" key, wrapped with name and description.
        # The Tool.schema property itself likely generates the full schema dict.
        expected_tool_schema = {
            "name": "mock_tool",
            "description": "A mock tool for testing",
            "parameters": {
                "type": "object",
                "properties": {
                    "param1": {"type": "string", "description": "First param"},
                    "param2": {"type": "integer", "description": "Second param"},
                },
                "required": ["param1"],
            },
        }
        # Assert that the value of the "parameters" key in the registry's output
        # matches the schema generated by the tool itself.
        self.assertEqual(mock_tool_schema["parameters"], expected_tool_schema)

        # Now verify the overall structure returned by get_schemas
        expected_full_schema = {
            "name": "mock_tool",
            "description": "A mock tool for testing",
            "parameters": expected_tool_schema,  # This should now match
        }
        self.assertEqual(schemas["mock_tool"], expected_full_schema)

    def test_get_schemas_empty(self):
        """Test getting tool schemas from an empty registry."""
        # Get the tool schemas
        schemas = self.registry.get_schemas()

        # Verify the schemas are empty
        self.assertEqual(schemas, {})

    def test_unregister_existing(self):
        """Test unregistering an existing tool from the registry."""
        # Register a tool
        self.registry.register(self.tool)
        self.assertEqual(len(self.registry.list_tools()), 1)

        # Unregister the tool
        self.registry.unregister("mock_tool")

        # Verify the tool is removed
        self.assertEqual(len(self.registry.list_tools()), 0)
        with self.assertRaises(ValueError):
            self.registry.get_tool("mock_tool")

    def test_unregister_nonexistent_tool(self):
        """Test unregistering a nonexistent tool from the registry."""
        # Try removing a nonexistent tool
        with self.assertRaisesRegex(ValueError, "No tool with name 'nonexistent_tool' is registered"):
            self.registry.unregister("nonexistent_tool")

    def test_list_tools(self):
        """Test listing registered tool names."""
        tool2 = Tool(name="tool2", description="desc2", parameters=[], handler=MagicMock())
        self.registry.register(self.tool)
        self.registry.register(tool2)

        tool_names = self.registry.list_tools()
        self.assertIsInstance(tool_names, list)
        self.assertCountEqual(tool_names, ["mock_tool", "tool2"])

    def test_get_all_tools(self):
        """Test getting all registered tool objects."""
        tool2 = Tool(name="tool2", description="desc2", parameters=[], handler=MagicMock())
        self.registry.register(self.tool)
        self.registry.register(tool2)

        all_tools = self.registry.get_all_tools()
        self.assertIsInstance(all_tools, list)
        self.assertEqual(len(all_tools), 2)
        self.assertIn(self.tool, all_tools)
        self.assertIn(tool2, all_tools)


if __name__ == "__main__":
    unittest.main()
