name: Python CI

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]  # Trigger on tags starting with v
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read # Allow checkout

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"] # Match requires-python in pyproject.toml

    steps:
    - uses: actions/checkout@v4
      with:
        # SonarCloud needs the full history to assign issues properly
        fetch-depth: 0 

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff # Install ruff separately first
        # Ensure pytest-cov is installed via [dev] extras
        pip install -e .[dev] 
        # Explicitly install pytest-cov to ensure it's available
        pip install pytest-cov

    # - name: Debug Python Path
    #   run: python -c "import sys; print(sys.path)"

    - name: Lint with Ruff (check)
      run: |
        ruff check --fix --verbose --preview .

    - name: Lint with Ruff (format)
      run: |
        ruff format . # Remove --check to auto-format files

    - name: Test with pytest and Generate Coverage
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        # Ensure API key exists for tests that might need it, but allow skipping
      run: |
        # List available test files to debug
        echo "Available test files:"
        ls -la test_dir/
        
        # Run pytest with more comprehensive coverage
        # Generate both XML and HTML reports
        python -m pytest --cov=src/cli_code --cov-report=term --cov-report=xml --cov-report=html --verbose test_dir/

        # Display the overall coverage percentage
        echo "Overall coverage percentage:"
        python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(f\"Coverage: {float(root.attrib['line-rate'])*100:.2f}%\")"

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master # Or use a specific version like @v2.1
      env:
        # GITHUB_TOKEN: {{ secrets.GITHUB_TOKEN }}  # Needed to decorate PRs with analysis results
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Required: Store your SonarCloud token as a GitHub secret
      with:
        args: >
          # Tell scanner where the coverage report is
          -Dsonar.python.coverage.reportPaths=coverage.xml
          # Add organization and project key if not using sonar-project.properties
          # -Dsonar.organization=your-org-key 
          # -Dsonar.projectKey=your-project-key

    - name: Build package
      run: python -m build
      
    - name: Store built packages
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 7
        
    - name: Upload coverage reports as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.xml
          coverage_html/
        retention-days: 7
        
  publish:
    name: Publish to PyPI
    needs: build-and-test
    # Only publish when a tag is pushed
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment: publish
    permissions:
      id-token: write  # Required for PyPI publishing with trusted publishing
      
    steps:
    - name: Download built packages
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1 