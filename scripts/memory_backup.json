{
  "entities": [
    {
      "type": "entity",
      "name": "James",
      "entityType": "Person",
      "observations": [
        "Is the current user I am interacting with",
        "GitHub username is ipv1337",
        "GitHub token is stored in keyring",
        "GitHub Organization is BlueCentre"
      ]
    },
    {
      "type": "entity",
      "name": "SlackConnection",
      "entityType": "Connection",
      "observations": [
        "Connection ID: a7ea21c2-02f8-4ac1-bca0-ed02014496de",
        "Status: ACTIVE",
        "Created at: 2025-04-03T08:33:29.676Z",
        "Updated at: 2025-04-03T08:33:52.375Z"
      ]
    },
    {
      "type": "entity",
      "name": "Slack Integration",
      "entityType": "Tool Connection",
      "observations": [
        "Has active connection with ID: a7ea21c2-02f8-4ac1-bca0-ed02014496de",
        "Can fetch conversation history",
        "Can post messages",
        "Can add reactions",
        "Can create reminders",
        "Can list custom emojis"
      ]
    },
    {
      "type": "entity",
      "name": "Google Tasks Integration",
      "entityType": "Tool Connection",
      "observations": [
        "No active connection found",
        "Connection attempt failed with error: Could not find a connection",
        "Requires authentication setup",
        "Connection successfully established with ID: 63629ab1-e9f9-4c8c-b8c3-e34ceec4e028",
        "Access to 6 task lists including: My Tasks, DCX Tasks, OOMS Tasks, HR Tasks, Documentation Tasks, and My Long Term Tasks",
        "Can list, create, update, and delete tasks and task lists",
        "Connection established via OAuth",
        "Last connection update: 2025-04-03T08:42:11.549Z"
      ]
    },
    {
      "type": "entity",
      "name": "GCP Integration",
      "entityType": "Tool Connection",
      "observations": [
        "Has active connection",
        "Access to multiple projects (500+ projects listed)",
        "Can perform GCP operations",
        "Can run GCP code",
        "Can manage billing information",
        "Can manage GKE clusters"
      ]
    },
    {
      "type": "entity",
      "name": "Development Best Practices",
      "entityType": "Workflow",
      "observations": [
        "Always test and validate changes locally before committing and pushing to the repository",
        "For configuration changes, verify that all supported configurations work as expected",
        "When adding new features like environment variable support, test with real settings"
      ]
    },
    {
      "type": "entity",
      "name": "GitHub CLI Auth Workaround",
      "entityType": "TechnicalSolution",
      "observations": [
        "When GitHub CLI operations fail with 'Resource not accessible by personal access token' errors, temporarily unset GITHUB_TOKEN",
        "Command pattern to use: GITHUB_TOKEN=\"\" gh <command>",
        "This bypasses the environment variable token and uses the properly scoped token stored in keyring",
        "For this user, the keyring token has 'admin:public_key', 'codespace', 'gist', 'read:org', 'repo' scopes"
      ]
    },
    {
      "type": "entity",
      "name": "CLI-Code Development Workflow",
      "entityType": "Workflow",
      "observations": [
        "Step 1: Analysis and Planning - Understand requirements, run local SonarCloud scan, review current metrics",
        "Step 2: Plan Implementation Steps - Break down solution, document the plan, consider edge cases",
        "Step 3: Implementation - First fetch latest from main (git fetch origin main), create a new feature branch (git checkout -b feature/name), then execute plan step by step, follow code style, avoid scope creep, commit major changes to feature branch regularly in case reversion is needed",
        "Step 4: Testing - Add/update tests, maintain code coverage, run tests frequently",
        "Step 5: Verification - Perform end-to-end testing, get user feedback, run final SonarCloud scan",
        "Step 6: Documentation - Update relevant docs, add code comments, update README if needed",
        "Step 7: Commit Preparation - Prepare detailed commit description, write clear messages, reference issues",
        "Step 8: Review and Submit - Final review, push only completed changes, submit PR",
        "Define the task or feature.",
        "Create a new branch for the work.",
        "Implement the code changes.",
        "Test the changes thoroughly.",
        "Commit the changes with a clear message.",
        "Push the branch to the remote repository.",
        "Check memory for GitHub PR creation authentication workflow.",
        "Create a Pull Request (PR).",
        "Address feedback and iterate.",
        "Merge the PR once approved.",
        "Deploy the changes if applicable."
      ]
    },
    {
      "type": "entity",
      "name": "SonarCloud Analysis Process",
      "entityType": "TechnicalProcess",
      "observations": [
        "Generate coverage report with: pytest --cov=src test_dir --cov-report=xml",
        "Run local SonarCloud scan with: sonar-scanner -Dsonar.login=YOUR_SONARCLOUD_TOKEN or use environment variable",
        "Local analysis allows for faster feedback loop before pushing changes",
        "GitHub Actions workflow automatically runs scans on push",
        "Add coverage_report.xml to .gitignore to avoid committing generated test artifacts"
      ]
    },
    {
      "type": "entity",
      "name": "GitHub PR Process",
      "entityType": "TechnicalProcess",
      "observations": [
        "When creating PRs with GitHub CLI, use: GITHUB_TOKEN=\"\" gh pr create --title \"[Title]\" --body \"[Description]\" --base main --head [branch-name]",
        "The GITHUB_TOKEN=\"\" prefix bypasses any environment variable token and uses properly scoped token in keyring",
        "If encountering 'GraphQL: Resource not accessible by personal access token' error, ensure GITHUB_TOKEN is unset",
        "Reference relevant issues in PR description",
        "Ensure all tests pass and code quality metrics meet standards before submitting PR",
        "Follow the project's PR template if available"
      ]
    },
    {
      "type": "entity",
      "name": "Code Quality Standards",
      "entityType": "Guidelines",
      "observations": [
        "Follow the project's code style enforced by ruff",
        "Address SonarCloud issues proactively",
        "Document public functions and methods with docstrings",
        "Aim for comprehensive test coverage with unit and integration tests",
        "Test edge cases and failure scenarios",
        "Mock external dependencies appropriately",
        "Be mindful of performance implications",
        "Profile code for expensive operations when necessary",
        "Consider memory usage for larger data processing"
      ]
    },
    {
      "type": "entity",
      "entityType": "Authentication Workflow",
      "observations": [
        "Before creating a GitHub PR, ensure proper authentication.",
        "This might involve using a Personal Access Token (PAT).",
        "Store the PAT securely, e.g., in environment variables or a secrets manager.",
        "Configure Git to use the PAT for HTTPS operations.",
        "Alternatively, use SSH keys for authentication.",
        "Ensure the SSH key is added to your GitHub account."
      ],
      "name": "GitHub PR Creation Authentication Workflow"
    },
    {
      "type": "entity",
      "name": "CLI-code Repository",
      "entityType": "Project",
      "observations": [
        "GitHub repository at BlueCentre/cli-code",
        "Python package with PyPI name 'cli-code-agent'",
        "AI coding assistant CLI using Google's Gemini models with function calling"
      ]
    },
    {
      "type": "entity",
      "name": "CLI-code Release Process",
      "entityType": "Workflow",
      "observations": [
        "Version 0.3.0 was released by updating version in pyproject.toml, updating changelog, committing changes, creating an annotated tag (v0.3.0), pushing to main, and pushing the tag",
        "CI/CD pipeline optimized to reduce redundant builds by limiting push triggers to main branch and tags only",
        "Follows semantic versioning with detailed criteria for MAJOR/MINOR/PATCH version bumps",
        "Uses GitHub Actions workflow to automatically publish to PyPI when a tag starting with 'v' is pushed",
        "Two publishing options: PyPI API Token (simpler) or Trusted Publishing (more secure)",
        "Verification steps include checking PyPI listing, installation testing, and functionality testing"
      ]
    },
    {
      "type": "entity",
      "name": "CLI-code GitHub Workflow",
      "entityType": "Process",
      "observations": [
        "Feature branches follow pattern 'feature/*' or 'fix/*'",
        "Pull requests used for code review before merging to main",
        "Version bumps and changelog updates committed directly to main after PR is merged",
        "Squash and merge recommended for feature branches to keep clean history",
        "CI pipeline runs on PR events and push to main for validation"
      ]
    },
    {
      "type": "entity",
      "name": "Git Commit Workflow",
      "entityType": "workflow",
      "observations": [
        "ALWAYS run 'git status' BEFORE committing to see ALL modified files",
        "ALWAYS check for untracked files that should be included",
        "Use git diff to verify changes before staging them",
        "When fixing tests/bugs, include ALL related files in the SAME commit",
        "Double-check after staging with 'git status' to confirm nothing is missing",
        "Include file paths in commit messages when specific files are modified",
        "NEVER use --no-verify when committing (always allow hooks to run)",
        "If pre-commit hooks fail, FIX the underlying issues instead of bypassing them",
        "Pre-commit hooks enforce quality standards that must be respected",
        "Follow the project's CI/CD practices without shortcuts",
        "EXCEPTION: For memory backup JSON files or other non-code files, it may be appropriate to use --no-verify, but document this exception clearly in the commit message",
        "AFTER creating or updating a PR, ALWAYS monitor the pipeline status by polling with 'gh pr checks' using a 1-minute sleep interval",
        "CHECK each pipeline step and ensure NONE of the checks fail",
        "If failures occur, immediately review recent PR comments (likely created by bots) to identify the specific issues",
        "ADDRESS all pipeline failures promptly before making additional changes",
        "Continue polling until all checks pass"
      ]
    },
    {
      "type": "entity",
      "name": "Memory Backup Location",
      "entityType": "FileLocation",
      "observations": [
        "Memory is backed up to scripts/memory_backup.json in the repository",
        "This file contains both entities and relations",
        "Should be updated when new important information is added to memory"
      ]
    }
  ],
  "relations": [
    {
      "type": "relation",
      "from": "James",
      "to": "SlackConnection",
      "relationType": "has authenticated"
    },
    {
      "type": "relation",
      "from": "Slack Integration",
      "to": "Tool Connection",
      "relationType": "is connected"
    },
    {
      "type": "relation",
      "from": "GCP Integration",
      "to": "Tool Connection",
      "relationType": "is connected"
    },
    {
      "type": "relation",
      "from": "Google Tasks Integration",
      "to": "Tool Connection",
      "relationType": "is connected"
    },
    {
      "type": "relation",
      "from": "CLI-Code Development Workflow",
      "to": "SonarCloud Analysis Process",
      "relationType": "includes"
    },
    {
      "type": "relation",
      "from": "CLI-Code Development Workflow",
      "to": "GitHub PR Process",
      "relationType": "includes"
    },
    {
      "type": "relation",
      "from": "CLI-Code Development Workflow",
      "to": "Code Quality Standards",
      "relationType": "enforces"
    },
    {
      "type": "relation",
      "from": "GitHub PR Process",
      "to": "GitHub CLI Auth Workaround",
      "relationType": "utilizes"
    },
    {
      "type": "relation",
      "from": "SonarCloud Analysis Process",
      "to": "Code Quality Standards",
      "relationType": "supports"
    },
    {
      "type": "relation",
      "from": "CLI-code Repository",
      "relationType": "uses",
      "to": "CLI-code Release Process"
    },
    {
      "type": "relation",
      "from": "CLI-code Repository",
      "relationType": "follows",
      "to": "CLI-code GitHub Workflow"
    },
    {
      "type": "relation",
      "from": "CLI-code Release Process",
      "relationType": "depends on",
      "to": "CLI-code GitHub Workflow"
    }
  ]
}
